//
//gRPC declaration
//
//compile python mapping with:
//pip3 install grpcio-tools
//python3 -m grpc_tools.protoc -I. --python_out=. --pyi_out=. --grpc_python_out=. registry.proto
//
//compile go mapping with:
//apt install protobuf-compiler
//go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
//protoc --go-grpc_out=./ --go_out=./  registry.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: logger.proto

package logrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Registry_StartRequest_FullMethodName = "/Registry/StartRequest"
	Registry_EndRequest_FullMethodName   = "/Registry/EndRequest"
)

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryClient interface {
	StartRequest(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogID, error)
	EndRequest(ctx context.Context, in *EndReq, opts ...grpc.CallOption) (*Status, error)
}

type registryClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryClient(cc grpc.ClientConnInterface) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) StartRequest(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogID, error) {
	out := new(LogID)
	err := c.cc.Invoke(ctx, Registry_StartRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) EndRequest(ctx context.Context, in *EndReq, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, Registry_EndRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServer is the server API for Registry service.
// All implementations must embed UnimplementedRegistryServer
// for forward compatibility
type RegistryServer interface {
	StartRequest(context.Context, *LogRequest) (*LogID, error)
	EndRequest(context.Context, *EndReq) (*Status, error)
	mustEmbedUnimplementedRegistryServer()
}

// UnimplementedRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedRegistryServer struct {
}

func (UnimplementedRegistryServer) StartRequest(context.Context, *LogRequest) (*LogID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRequest not implemented")
}
func (UnimplementedRegistryServer) EndRequest(context.Context, *EndReq) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndRequest not implemented")
}
func (UnimplementedRegistryServer) mustEmbedUnimplementedRegistryServer() {}

// UnsafeRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryServer will
// result in compilation errors.
type UnsafeRegistryServer interface {
	mustEmbedUnimplementedRegistryServer()
}

func RegisterRegistryServer(s grpc.ServiceRegistrar, srv RegistryServer) {
	s.RegisterService(&Registry_ServiceDesc, srv)
}

func _Registry_StartRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).StartRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_StartRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).StartRequest(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_EndRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).EndRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_EndRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).EndRequest(ctx, req.(*EndReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Registry_ServiceDesc is the grpc.ServiceDesc for Registry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Registry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartRequest",
			Handler:    _Registry_StartRequest_Handler,
		},
		{
			MethodName: "EndRequest",
			Handler:    _Registry_EndRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logger.proto",
}
