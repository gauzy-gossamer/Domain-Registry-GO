//
//gRPC declaration
//
//compile python mapping with:
//pip3 install grpcio-tools
//python3 -m grpc_tools.protoc -I. --python_out=. --pyi_out=. --grpc_python_out=. registry.proto
//
//compile go mapping with:
//apt install protobuf-compiler
//go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
//protoc --go-grpc_out=./ --go_out=./  registry.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: registry.proto

package regrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Registry_LoginSystem_FullMethodName       = "/Registry/LoginSystem"
	Registry_GetExpiredDomains_FullMethodName = "/Registry/GetExpiredDomains"
	Registry_DeleteDomain_FullMethodName      = "/Registry/DeleteDomain"
	Registry_LogoutSystem_FullMethodName      = "/Registry/LogoutSystem"
)

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryClient interface {
	LoginSystem(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Session, error)
	GetExpiredDomains(ctx context.Context, in *Session, opts ...grpc.CallOption) (Registry_GetExpiredDomainsClient, error)
	DeleteDomain(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Status, error)
	LogoutSystem(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Status, error)
}

type registryClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryClient(cc grpc.ClientConnInterface) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) LoginSystem(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, Registry_LoginSystem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetExpiredDomains(ctx context.Context, in *Session, opts ...grpc.CallOption) (Registry_GetExpiredDomainsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Registry_ServiceDesc.Streams[0], Registry_GetExpiredDomains_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &registryGetExpiredDomainsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Registry_GetExpiredDomainsClient interface {
	Recv() (*Domain, error)
	grpc.ClientStream
}

type registryGetExpiredDomainsClient struct {
	grpc.ClientStream
}

func (x *registryGetExpiredDomainsClient) Recv() (*Domain, error) {
	m := new(Domain)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registryClient) DeleteDomain(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, Registry_DeleteDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) LogoutSystem(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, Registry_LogoutSystem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServer is the server API for Registry service.
// All implementations must embed UnimplementedRegistryServer
// for forward compatibility
type RegistryServer interface {
	LoginSystem(context.Context, *Empty) (*Session, error)
	GetExpiredDomains(*Session, Registry_GetExpiredDomainsServer) error
	DeleteDomain(context.Context, *Domain) (*Status, error)
	LogoutSystem(context.Context, *Session) (*Status, error)
	mustEmbedUnimplementedRegistryServer()
}

// UnimplementedRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedRegistryServer struct {
}

func (UnimplementedRegistryServer) LoginSystem(context.Context, *Empty) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginSystem not implemented")
}
func (UnimplementedRegistryServer) GetExpiredDomains(*Session, Registry_GetExpiredDomainsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetExpiredDomains not implemented")
}
func (UnimplementedRegistryServer) DeleteDomain(context.Context, *Domain) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomain not implemented")
}
func (UnimplementedRegistryServer) LogoutSystem(context.Context, *Session) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutSystem not implemented")
}
func (UnimplementedRegistryServer) mustEmbedUnimplementedRegistryServer() {}

// UnsafeRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryServer will
// result in compilation errors.
type UnsafeRegistryServer interface {
	mustEmbedUnimplementedRegistryServer()
}

func RegisterRegistryServer(s grpc.ServiceRegistrar, srv RegistryServer) {
	s.RegisterService(&Registry_ServiceDesc, srv)
}

func _Registry_LoginSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).LoginSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_LoginSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).LoginSystem(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetExpiredDomains_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Session)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegistryServer).GetExpiredDomains(m, &registryGetExpiredDomainsServer{stream})
}

type Registry_GetExpiredDomainsServer interface {
	Send(*Domain) error
	grpc.ServerStream
}

type registryGetExpiredDomainsServer struct {
	grpc.ServerStream
}

func (x *registryGetExpiredDomainsServer) Send(m *Domain) error {
	return x.ServerStream.SendMsg(m)
}

func _Registry_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Domain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_DeleteDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).DeleteDomain(ctx, req.(*Domain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_LogoutSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).LogoutSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_LogoutSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).LogoutSystem(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

// Registry_ServiceDesc is the grpc.ServiceDesc for Registry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Registry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginSystem",
			Handler:    _Registry_LoginSystem_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _Registry_DeleteDomain_Handler,
		},
		{
			MethodName: "LogoutSystem",
			Handler:    _Registry_LogoutSystem_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetExpiredDomains",
			Handler:       _Registry_GetExpiredDomains_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "registry.proto",
}
