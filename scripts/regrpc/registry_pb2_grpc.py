# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import registry_pb2 as registry__pb2


class RegistryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LoginSystem = channel.unary_unary(
                '/Registry/LoginSystem',
                request_serializer=registry__pb2.Empty.SerializeToString,
                response_deserializer=registry__pb2.Session.FromString,
                )
        self.GetExpiredDomains = channel.unary_stream(
                '/Registry/GetExpiredDomains',
                request_serializer=registry__pb2.Session.SerializeToString,
                response_deserializer=registry__pb2.Domain.FromString,
                )
        self.DeleteDomain = channel.unary_unary(
                '/Registry/DeleteDomain',
                request_serializer=registry__pb2.Domain.SerializeToString,
                response_deserializer=registry__pb2.Status.FromString,
                )
        self.LogoutSystem = channel.unary_unary(
                '/Registry/LogoutSystem',
                request_serializer=registry__pb2.Session.SerializeToString,
                response_deserializer=registry__pb2.Status.FromString,
                )


class RegistryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def LoginSystem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExpiredDomains(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDomain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogoutSystem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegistryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LoginSystem': grpc.unary_unary_rpc_method_handler(
                    servicer.LoginSystem,
                    request_deserializer=registry__pb2.Empty.FromString,
                    response_serializer=registry__pb2.Session.SerializeToString,
            ),
            'GetExpiredDomains': grpc.unary_stream_rpc_method_handler(
                    servicer.GetExpiredDomains,
                    request_deserializer=registry__pb2.Session.FromString,
                    response_serializer=registry__pb2.Domain.SerializeToString,
            ),
            'DeleteDomain': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDomain,
                    request_deserializer=registry__pb2.Domain.FromString,
                    response_serializer=registry__pb2.Status.SerializeToString,
            ),
            'LogoutSystem': grpc.unary_unary_rpc_method_handler(
                    servicer.LogoutSystem,
                    request_deserializer=registry__pb2.Session.FromString,
                    response_serializer=registry__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Registry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Registry(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def LoginSystem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Registry/LoginSystem',
            registry__pb2.Empty.SerializeToString,
            registry__pb2.Session.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExpiredDomains(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Registry/GetExpiredDomains',
            registry__pb2.Session.SerializeToString,
            registry__pb2.Domain.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteDomain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Registry/DeleteDomain',
            registry__pb2.Domain.SerializeToString,
            registry__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LogoutSystem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Registry/LogoutSystem',
            registry__pb2.Session.SerializeToString,
            registry__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
